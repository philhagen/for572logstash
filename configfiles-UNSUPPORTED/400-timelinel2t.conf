######################################################################
# Parse the L2T into common field names differentiated by Plaso parser
# See PDF for searchable fields per parser
######################################################################
filter {
  if "process_timeline" in [tags] {
    ruby {
      code => "event['timestamp'] = event['timestamp'].to_f / 1000" 
    }
    date {
      match => [ "timestamp", "UNIX_MS" ]
    }
####################################################
# Normalize the values in the timestamp description
####################################################
    if [timestamp_desc] {
      if [timestamp_desc] == "Metadata Modification Time" {
	mutate { replace => { "timestamp_desc" => "metadata-mtime" }
	}
      }
      else if [timestamp_desc] == "Last Access Time" {
	mutate { replace => { "timestamp_desc" => "atime" }
	}
      }
      else if [timestamp_desc] == "Creation Time" {
	mutate { replace => { "timestamp_desc" => "ctime" }
	}
      }
      else if [timestamp_desc] == "Content Modification Time" {
	mutate { replace => { "timestamp_desc" => "mtime" }
	}
      }
      else if [timestamp_desc] == "File Last Modification Time" {
	mutate { replace => { "timestamp_desc" => "mtime" }
	}
      }
      else if [timestamp_desc] == "First Connection Time" {
	mutate { replace => { "timestamp_desc" => "ctime" }
	}
      }
      else if [timestamp_desc] == "Installation Time" {
	mutate { replace => { "timestamp_desc" => "ctime" }
	}
      }
      else if [timestamp_desc] == "Last Connection Time" {
	mutate { replace => { "timestamp_desc" => "atime" }
	}
      }
      else if [timestamp_desc] == "Last registered time" {
	mutate { replace => { "timestamp_desc" => "atime" }
	}
      }
      else if [timestamp_desc] == "Last Shutdown Time" {
	mutate { replace => { "timestamp_desc" => "shutdown" }
	}
      }
      else if [timestamp_desc] == "Launch time" {
        mutate { replace => { "timestamp_desc" => "launch" }
        }
      }
    }
    #####################################################################
    # We don't like two dimensional values. Squash to a single variable
    #####################################################################
    if [file_size] {
      mutate {
        add_field => { "filesize" => "%{file_size[0]}" }
        remove_field => [ "file_size" ]
      }
    }

    #################################################################################
    # Your evidence file's is best removed to hide your local directory path if appl
    #################################################################################
    ruby {
      code => "event['display_name'] = event['display_name'].split('/').last"
    }

    ############################################################################################
    # The BIG Windows Event log parsing section. Windows produces XML. We must deobfuscate it
    ############################################################################################
    if "winevtx" in [parser] {
      ruby { 
	code => "event['xml_string'].gsub!('\\\"','\"')" 
      }
      xml {
	store_xml => "false"
	remove_namespaces => "true"
	source => "xml_string"
	xpath => [ "/Event/System/Provider/@Name", "evt-provider",
		   "/Event/System/EventID/text()", "evt-eventid",
		   "/Event/System/EventRecordID/text()", "evt-recordid",
		   "/Event/System/Data[@Name='param1']/text()", "evt-sparam1",
		   "/Event/System/ClientMachine/text()", "evt-clientmachine",
		   "/Event/System/ClientProcessId/text()", "evt-clientprocessid",
		   "/Event/System/Data[@Name='Id']/text()", "evt-id",
		   "/Event/System/User/text()", "evt-user",
		   "/Event/System/HostProcess/text()", "evt-hostprocess",
		   "/Event/System/ProviderName/text()", "evt-providername",
		   "/Event/System/ProviderPath/text()", "evt-providerpath",
		   "/Event/System/ServiceActiveTimeInSeconds/text()", "evt-svctimesec",
		   "/Event/System/Data[@Name='Command']/text()", "evt-command",
		   "/Event/System/Computer/text()", "evt-computer",
		   "/Event/System/Channel/text()", "evt-filename" 
	]
	xpath => [ "/Event/EventData/Data[@Name='QueryName']/text()", "evt-queryname",
		   "/Event/EventData/Data[@Name='ActionName']/text()", "evt-actionname",
		   "/Event/EventData/Data[@Name='Path']/text()", "evt-path",
		   "/Event/EventData/Data[@Name='UserContext']/text()", "evt-usercontext",
		   "/Event/EventData/Data[@Name='Payload']/text()", "evt-payload",
		   "/Event/EventData/Data[@Name='TaskName']/text()", "evt-taskname",
		   "/Event/EventData/Data[@Name='ObjectName']/text()", "evt-objectname",
		   "/Event/EventData/Data[@Name='ProcessName']/text()", "evt-processname",
		   "/Event/EventData/Data[@Name='SubjectDomainName']/text()", "evt-subdomainname",
		   "/Event/EventData/Data[@Name='SubjectUserName']/text()", "evt-subusername",
		   "/Event/EventData/Data[@Name='SubjectUserSid']/text()", "evt-subusersid",
		   "/Event/EventData/Data[@Name='ProcessId']/text()", "evt-processid",
		   "/Event/EventData/Data[@Name='Param2']/text()", "evt-param2",
		   "/Event/EventData/Data[@Name='Param1']/text()", "evt-param1"
	]
      }
      ########################################################################################
      # Windows events have options to where the abs path+file referenced on the FS resides
      ########################################################################################
      if [evt-path] {
        mutate {
          replace => [ "filename", "%{evt-path}" ]
          remove_field => [ "evt-path" ]
        }
      }
      else if [evt-actionname] {
        mutate {
          replace => [ "filename", "%{evt-actionname}" ]
          remove_field => [ "evt-actionname" ]
        }
      }

      ###############################################
      # Event ID was coming has hex. Needed decimal
      ###############################################
      if [evt-processid] {
        mutate {
          convert => ["evt-processid", "integer"]
        }
        ruby { 
          code => 'event["evt-processid"] = event["evt-processid"].hex' 
        } 
      }
      ################################################
      # event_level == logon type, so let's rename it
      ################################################
      if [event_level] {
        mutate {
          add_field => { "evt-logon_type" => "%{event_level}" }
          remove_field => [ "event_level" ]
        }
      }
      ##########################################################################
      # If you filter by a field in Kibana that doesn't exist, the entire 
      # record is not visible. Make sure all events at least have an empty field
      ##########################################################################
      if ! [evt-provider] { mutate { add_field => { "evt-provider" => "" } } }
      if ! [evt-eventid] { mutate { add_field => { "evt-eventid" => "" } } }
      if ! [evt-recordid] { mutate { add_field => { "evt-recordid" => "" } } }
      if ! [evt-sparam1] { mutate { add_field => { "evt-sparam1" => "" } } }
      if ! [evt-clientmachine] { mutate { add_field => { "evt-clientmachine" => "" } } }
      if ! [evt-clientprocessid] { mutate { add_field => { "evt-clientprocessid" => "" } } }
      if ! [evt-id] { mutate { add_field => { "evt-id" => "" } } }
      if ! [evt-user] { mutate { add_field => { "evt-user" => "" } } }
      if ! [evt-hostprocess] { mutate { add_field => { "evt-hostprocess" => "" } } }
      if ! [evt-providername] { mutate { add_field => { "evt-providername" => "" } } }
      if ! [evt-providerpath] { mutate { add_field => { "evt-providerpath" => "" } } }
      if ! [evt-svctimesec] { mutate { add_field => { "evt-svctimesec" => "" } } }
      if ! [evt-command] { mutate { add_field => { "evt-command" => "" } } }
      if ! [evt-computer] { mutate { add_field => { "evt-computer" => "" } } }
      if ! [evt-queryname] { mutate { add_field => { "evt-queryname" => "" } } }
      if ! [evt-usercontext] { mutate { add_field => { "evt-usercontext" => "" } } }
      if ! [evt-payload] { mutate { add_field => { "evt-payload" => "" } } }
      if ! [evt-taskname] { mutate { add_field => { "evt-taskname" => "" } } }
      if ! [evt-objectname] { mutate { add_field => { "evt-objectname" => "" } } }
      if ! [evt-processname] { mutate { add_field => { "evt-processname" => "" } } }
      if ! [evt-subdomainname] { mutate { add_field => { "evt-subdomainname" => "" } } }
      if ! [evt-subusername] { mutate { add_field => { "evt-subusername" => "" } } }
      if ! [evt-subusersid] { mutate { add_field => { "evt-subusersid" => "" } } }
      if ! [evt-processid] { mutate { add_field => { "evt-processid" => "" } } }
      if ! [evt-param2] { mutate { add_field => { "evt-param2" => "" } } }
      if ! [evt-param1] { mutate { add_field => { "evt-param1" => "" } } }

      # Parse out values for PS processing not leaving them clumbed in "messages"
      if "Microsoft-Windows-PowerShell" in [evt-provider] {
        grok {
	  match => { "strings" => "%{GREEDYDATA} User = (?<ps_user>[^\n\r]+)" }
        }
        grok {
	  match => { "strings" => "%{GREEDYDATA} Script Name = (?<ps_script_name>[^\n\r]+)" }
        }
        grok {
	  match => { "strings" => "%{GREEDYDATA} Command Type = (?<ps_command_type>[^\n\r]+)" }
        }
        grok {
	  match => { "strings" => "%{GREEDYDATA} Command Name = (?<ps_command_name>[^\n\r]+)" }
        }
        grok {
	  match => { "strings" => "%{GREEDYDATA} Host Application = (?<ps_host_app>[^\n\r]+)" }
        }
        grok {
	  match => { "strings" => "%{GREEDYDATA} Host Version = (?<ps_host_version>[^\r\n]+)" }
        }
        grok {
	  match => { "strings" => "%{GREEDYDATA} Host Name = (?<ps_host_name>[^\n\r]+)" }
        }
        mutate {
          remove_field => [ "strings" ]
        }
      }
    }

    #########################################################################
    # Remove fields either redundant or never needed to cut down on size
    #########################################################################
    if "winreg" in [parser] {
       mutate {
        remove_field => [ "filename", "regvalue" ]
      }
       mutate {
        rename => { "message" => "regvalue" }
      }
    }
    if [path] {
      mutate {
        replace => [ "filename", "%{path}" ]
        remove_field => [ "path" ]
      }
    }
    if [display_name] and [display_name] in [filename] {
      mutate {
        remove_field => [ "filename" ]
        remove_field => [ "evt-filename" ]
      }
    }
    if [parser] == "mactime" {
      mutate {
        replace => [ "filename", "%{message}" ]
        remove_field => [ "message" ]
      }
    }
    mutate {
      remove_field => [ "pathspec", "xml_string", "data_type", "type", "event_identifier" ]
      remove_field => [ "file_entry_type", "file_system_type", "host", "port", "store_index" ]
      remove_field => [ "username" , "mode_as_string", "message_identifier", "source_name" ]
      remove_field => [ "computer_name", "timestamp", "store_number" ]
    }
    if [message] {
      mutate {
        remove_field => [ "message" ]
      }
    }
  }
}
