##########################################################################################
# Syslog messages don't use a consistent format. Below works across three logging formats
# seen in the real world as well as for vanila linux. It won't catch everything. Improve
# where exceptions exist.
##########################################################################################
# TODO:
# Received disconnect from 192.168.75.43: 11: disconnected by user
# subsystem request for sftp
# reverse mapping checking getaddrinfo for ansible [192.168.75.43] failed - POSSIBLE BREAK-IN ATTEMPT!
#
# Parse common logged formats for ssh and sudo
# tags added upon parsing:
#   "sudo_run" for the sudo command executed
#   "sudo_auth_success"
#   "sudo_auth_failure"
#   "su_auth_succeeded"
#   "su_auth_fail/pass"
#   "invalid" if the target user does not exist

filter {
  ##############################################################################
  # Due to prementioned lack of stds, records w/o syslog_program must be checked
  ##############################################################################
  if "process_syslog" in [tags] and [syslog_program] in ["sudo", "su", "" ] or ! [syslog_program] {

    #################################################################################################
    # FAILED ATTEMPTS - Tag as invalid if login doesn't exist on target. Groking for "invalid" in the
    # match opened up the unfortunate instance of misparsing due to too many general grok variables.
    # Needs refining to more than just "invalid"
    #################################################################################################
    if [message] =~ /invalid/ {
      mutate {
        add_tag => "invalid"
      }
    }

    ####################################################
    # SUDO Successes/failures
    ####################################################
    grok {
      match => { "message" => "%{USERNAME:username} : TTY=%{TTY2:tty} ; PWD=%{UNIXPATH:path} ; USER=%{USER:sudouser} ; COMMAND=%{GREEDYDATA:sudocmd}" }
      patterns_dir => "/usr/local/sof-elk/grok-patterns"
      add_tag => [ "sudo_run", "parse_done" ]
    }
    grok {
      match => { "message" => "%{WORD:auth_module}\(%{WORD}:%{WORD:module}\): authentication success; logname=%{USERNAME:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{TTY2:tty} ruser=%{USERNAME:ruser} rhost= *user=%{USERNAME:username}" }
      patterns_dir => "/usr/local/sof-elk/grok-patterns"
      add_tag => [ "sudo_auth_success", "parse_done" ]
    }
    grok {
      match => { "message" => "%{WORD:auth_method}\(%{WORD}:%{WORD:module}\): authentication failure; logname=(%{USERNAME:logname})? uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{TTY2:tty} ruser=(%{USERNAME:ruser})? rhost=(?:%{HOSTNAME:remote_host}|\s*) *(user=%{USERNAME:user})?" }
      patterns_dir => "/usr/local/sof-elk/grok-patterns"
      add_tag => [ "sudo_auth_failure", "parse_done" ]
    }
    ###################################################################################
    # If we had success matching and previously had no syslog_program, set to sudo
    ###################################################################################
    if ! [syslog_program] and "parse_done" in [tags] {
      mutate { 
        add_field => { "syslog_program" => "sudo" }
      }
    }

    ####################################################
    # SU Successes/failures
    ####################################################
    grok {
      match => { "message" => "'su %{USERNAME:suuser}' (?<suresult>[^\s]+) for %{USERNAME:username} on %{TTY2:tty}" }
      patterns_dir => "/usr/local/sof-elk/grok-patterns"
      add_tag => [ "su_auth_%{suresult}", "parse_done" ]
    }
    ###################################################################################
    # If we had success matching and previously had no syslog_program, set to su
    ###################################################################################
    if ! [syslog_program] and "parse_done" in [tags] {
      mutate { 
        add_field => { "syslog_program" => "su" }
      }
    }
  }
}
